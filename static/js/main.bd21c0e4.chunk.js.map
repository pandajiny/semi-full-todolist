{"version":3,"sources":["Todolist/ApolloClient.js","Todolist/Queries.js","Todolist/CreateTodo.js","Todolist/Todo.js","Todolist/ListTodo.js","Todolist/TodolistMain.js","App.js","serviceWorker.js","index.js"],"names":["client","ApolloClient","uri","GET_TODOLIST","gql","CREATE_TODO","Input","styled","input","Hr","hr","CreateTodo","useState","inputValue","setInputValue","useMutation","createTodo","value","onChange","event","console","log","target","placeholder","onKeyPress","key","variables","todo_des","Undone","div","Done","Todo","onClick","props","done","this","des","React","Component","Container","ListTodo","useQuery","data","error","loading","getTodolist","map","todo","index","todo_done","Header","header","TodolistMain","GlobalStyle","createGlobalStyle","App","Fragment","path","component","Todolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAMeA,EAJA,I,MAAIC,GAAa,CAC9BC,IAAK,2B,0TCDA,IAAMC,EAAeC,IAAH,KAQZC,EAAcD,IAAH,K,4VCJxB,IAAME,EAAQC,IAAOC,MAAV,KAWLC,EAAKF,IAAOG,GAAV,KAuCOC,EAlCI,WAAO,IAAD,EACaC,mBAAS,IADtB,mBAChBC,EADgB,KACJC,EADI,OAEFC,YAAYV,GAA1BW,EAFgB,oBAqBvB,OACE,6BACE,kBAACV,EAAD,CACEW,MAAOJ,EACPK,SArBe,SAAAC,GACnBC,QAAQC,IAAIR,GACZC,EAAcK,EAAMG,OAAOL,QAoBvBM,YAAY,YACZC,WAbiB,SAAAL,GACH,UAAdA,EAAMM,MACRL,QAAQC,IAAI,iBANdL,EAAW,CAAEU,UAAW,CAAEC,SAAUd,KACpCC,EAAc,QAkBZ,kBAACL,EAAD,Q,8bC/CN,IAAMmB,EAASrB,IAAOsB,IAAV,KASNC,EAAOvB,IAAOsB,IAAV,KAUWE,E,iLACT,IAAD,OAQP,OACE,yBAAKC,QARY,WACb,EAAKC,MAAMC,QAQQ,IAApBC,KAAKF,MAAMC,KACV,kBAACN,EAAD,KAASO,KAAKF,MAAMG,KAEpB,kBAACN,EAAD,KAAOK,KAAKF,MAAMG,U,GAdMC,IAAMC,W,sHCfxC,IAAMC,EAAYhC,IAAOsB,IAAV,KAyDAW,EA/BE,WAAO,IAAD,EACYC,YAAStC,GAAlCuC,EADa,EACbA,KAAMC,EADO,EACPA,MAAOC,EADA,EACAA,QAerB,OACE,kBAACL,EAAD,KACGK,GAAW,UACXD,GAAS,SACRC,GACAF,EAAKG,YAAYC,KAAI,SAACC,EAAMC,GAE1B,OADA5B,QAAQC,IAAI0B,GAEV,kBAAC,EAAD,CAAMX,IAAKW,EAAKpB,SAAUO,KAAMa,EAAKE,UAAWxB,IAAKuB,S,oVCjDjE,IAAMT,EAAYhC,IAAOsB,IAAV,KAOTqB,EAAS3C,IAAO4C,OAAV,KAoDGC,EAdM,WACnB,OACE,kBAAC,IAAD,CAAgBpD,OAAQA,GACtB,kBAAC,IAAD,CAAqBA,OAAQA,GAC3B,kBAAC,EAAD,KACE,kBAACkD,EAAD,+BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,U,oQCvDV,IAAMG,EAAcC,YAAH,KAOIC,E,iLAEjB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACH,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,YAAYC,UAAWC,U,GANZtB,IAAMC,WCDnBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bd21c0e4.chunk.js","sourcesContent":["import ApolloClient from \"apollo-boost\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:4000/\"\r\n});\r\n\r\nexport default client;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_TODOLIST = gql`\r\n  {\r\n    getTodolist {\r\n      todo_des\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_TODO = gql`\r\n  mutation createTodo($todo_des: String!) {\r\n    createTodo(todo_des: $todo_des)\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useMutation } from \"react-apollo-hooks\";\r\nimport { CREATE_TODO } from \"./Queries\";\r\n\r\nconst Input = styled.input`\r\n  padding: 0.5em;\r\n  margin: 0.5em;\r\n  background: #404040;\r\n  width: 80%;\r\n  border: none;\r\n  border-radius: 0.3rem;\r\n  font-size: 1.3rem;\r\n  color: white;\r\n`;\r\n\r\nconst Hr = styled.hr`\r\n  border: 0.5px solid #404040;\r\n  width: 100%;\r\n`;\r\n\r\nconst CreateTodo = () => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [createTodo] = useMutation(CREATE_TODO);\r\n\r\n  const handleChange = event => {\r\n    console.log(inputValue);\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    createTodo({ variables: { todo_des: inputValue } });\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  const handleKeyPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      console.log(\"Enter Pressed\");\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Input\r\n        value={inputValue}\r\n        onChange={handleChange}\r\n        placeholder=\"Type here\"\r\n        onKeyPress={handleKeyPress}\r\n      ></Input>\r\n      <Hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateTodo;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst Undone = styled.div`\r\n  display: inline-block;\r\n  color: white;\r\n  text-align: center;\r\n  font-size: 1.2rem;\r\n  font-weight: lighter;\r\n  padding: 0.5rem;\r\n`;\r\n\r\nconst Done = styled.div`\r\n  display: inline-block;\r\n  color: gray;\r\n  text-align: center;\r\n  font-size: 1.2rem;\r\n  font-weight: lighter;\r\n  padding: 0.5rem;\r\n  text-decoration-line: line-through;\r\n`;\r\n\r\nexport default class Todo extends React.Component {\r\n  render() {\r\n    const handleDone = () => {\r\n      if (this.props.done === false) {\r\n        // this.props.handleDone();\r\n      } else {\r\n        // this.props.handleUndo();\r\n      }\r\n    };\r\n    return (\r\n      <div onClick={handleDone}>\r\n        {this.props.done === false ? (\r\n          <Undone>{this.props.des}</Undone>\r\n        ) : (\r\n          <Done>{this.props.des}</Done>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Todo from \"./Todo\";\r\n\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport { GET_TODOLIST } from \"./Queries\";\r\n\r\nconst Container = styled.div`\r\n  margin-left: 1rem;\r\n  color: white;\r\n`;\r\n\r\n// export default class ListTodo extends React.Component {\r\n//   render() {\r\n//     const listToComponent = list => {\r\n//       return list.map((todo, index) => {\r\n//         console.log(todo);\r\n//         return (\r\n//           <Todo\r\n//             handleDone={() => this.props.handleDone(index)}\r\n//             handleUndo={() => this.props.handleUndo(index)}\r\n//             des={todo.todo_des}\r\n//             done={todo.todo_done}\r\n//             key={index}\r\n//           ></Todo>\r\n//         );\r\n//       });\r\n//     };\r\n\r\n//     return <Container>{listToComponent(this.props.todolist)}</Container>;\r\n//   }\r\n// }\r\n\r\nconst ListTodo = () => {\r\n  const { data, error, loading } = useQuery(GET_TODOLIST);\r\n  // const listToComponent = list => {\r\n  //   return list.map((todo, index) => {\r\n  //     console.log(todo);\r\n  //     return (\r\n  //       <Todo\r\n  //         handleDone={() => this.props.handleDone(index)}\r\n  //         handleUndo={() => this.props.handleUndo(index)}\r\n  //         des={todo.todo_des}\r\n  //         done={todo.todo_done}\r\n  //         key={index}\r\n  //       ></Todo>\r\n  //     );\r\n  //   });\r\n  // };\r\n  return (\r\n    <Container>\r\n      {loading && \"loading\"}\r\n      {error && \"error\"}\r\n      {!loading &&\r\n        data.getTodolist.map((todo, index) => {\r\n          console.log(todo);\r\n          return (\r\n            <Todo des={todo.todo_des} done={todo.todo_done} key={index}></Todo>\r\n          );\r\n        })}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ListTodo;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\r\nimport client from \"./ApolloClient\";\r\n\r\nimport CreateTodo from \"./CreateTodo\";\r\nimport ListTodo from \"./ListTodo\";\r\n\r\nconst Container = styled.div`\r\n  background-color: black;\r\n  align-content: left;\r\n  text-align: left;\r\n  size: cover;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  background-color: black;\r\n  color: white;\r\n  font-size: 1.3rem;\r\n  padding: 0.2rem;\r\n  margin-left: 1rem;\r\n`;\r\n//     // handle Functions\r\n// const handleDone = key => {\r\n//   console.log(key);\r\n//   let newTodolist = todolist;\r\n//   newTodolist[key].todo_done = true;\r\n//   this.setState({\r\n//     todolist: newTodolist\r\n//   });\r\n// };\r\n\r\n// const handleUndo = key => {\r\n//   console.log(key);\r\n//   let newTodolist = todolist;\r\n//   newTodolist[key].todo_done = false;\r\n//   this.setState({\r\n//     todolist: newTodolist\r\n//   });\r\n// };\r\n\r\n// const handleCreate = description => {\r\n//   const newTodo = {\r\n//     todo_des: description,\r\n//     todo_done: false\r\n//   };\r\n//   this.setState(prevState => ({\r\n//     todolist: [...prevState.todolist, newTodo]\r\n//   }));\r\n//   console.log(`newTodo: ${newTodo.todo_des}`);\r\n//   console.log(`newList : ${this.state.todolist[2]}`);\r\n// };\r\n\r\nconst TodolistMain = () => {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <ApolloHooksProvider client={client}>\r\n        <Container>\r\n          <Header>✓ TODOLIST ✓</Header>\r\n          <CreateTodo />\r\n          <ListTodo />\r\n        </Container>\r\n      </ApolloHooksProvider>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default TodolistMain;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport Todolist from \"./Todolist/TodolistMain\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color : black;\n    font-family : -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif\n  }\n`;\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <GlobalStyle />\n        <Router>\n          <Route path=\"/todolist\" component={Todolist} />\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}